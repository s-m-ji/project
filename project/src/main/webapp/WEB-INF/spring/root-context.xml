<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- config파일 자동 로드 (MI, 2023/07/25) location="classpath:database.properties"  /!-->
    <context:property-placeholder location="/config/*.properties" /> 

	<!-- bean 객체로 등록하기 (MI, 2023/07/25) -->
	<context:component-scan base-package="com.project"></context:component-scan>
	<!-- <context:component-scan base-package="com.project.exception"></context:component-scan> -->
	<!-- <context:component-scan base-package="com.project.aop"></context:component-scan> -->

	<!-- hikari를 사용하기 위해서 (MI, 2023/07/25) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="${spring.datasource.driverClassName}"></property>
		<property name="jdbcUrl" value="${spring.datasource.url}"></property>
		<property name="username" value="${spring.datasource.username}"></property>
		<property name="password" value="${spring.datasource.password}">	</property>
	</bean>

	<!-- ref = "객체" (MI, 2023/07/25)-->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	  <constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>

	<!-- mybatis를 사용하기 위함 (MI, 2023/07/25) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<mybatis-spring:scan base-package="com.project.mapper"/>

	<!-- 파일 첨부를 하기 위함 (MI, 2023/07/25) -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <property name="defaultEncoding" value="utf-8"></property>
	    <!-- 1024 * 1024 * 10 bytes  10MB -->
	    <property name="maxUploadSize" value="104857560"></property>
	    <!-- 1024 * 1024 * 2 bytes  2MB -->
	    <property name="maxUploadSizePerFile" value="2097152"></property>
	    <property name="uploadTempDir" value ="file:/C:/upload/tmp"></property>
	    <property name="maxInMemorySize" value="10485756"></property>
	</bean>

	<!-- 시큐리티를 사용하기 위함 (MI, 2023/07/25) -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>

	<!-- aop 설정을 위해 컴포넌트 개별 지정 (MI, 2023/07/25) -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->

	<!-- 트랜잭션 관련 설정 추가 (MI, 2023/07/25) -->
	  <!-- <bean id="transactionManager"
	    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	  </bean>
	  <tx:annotation-driven /> -->

</beans>